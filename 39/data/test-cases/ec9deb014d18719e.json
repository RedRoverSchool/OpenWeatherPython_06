{"uid":"ec9deb014d18719e","name":"test_TC_001_09_05_switched_on_Celsius","fullName":"tests.test_widgets_constructor_page_ow6.TestWidgetsConstractorPage#test_TC_001_09_05_switched_on_Celsius","historyId":"6c86a98f90e2ce94a2191c756e6635b3","time":{"start":1688608597992,"stop":1688608601577,"duration":3585},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: headless chrome=114.0.5735.133)\nStacktrace:\n#0 0x558973f564e3 <unknown>\n#1 0x558973c85c76 <unknown>\n#2 0x558973c8a53c <unknown>\n#3 0x558973c8c480 <unknown>\n#4 0x558973cf9f32 <unknown>\n#5 0x558973ce1012 <unknown>\n#6 0x558973cf930e <unknown>\n#7 0x558973ce0de3 <unknown>\n#8 0x558973cb62dd <unknown>\n#9 0x558973cb734e <unknown>\n#10 0x558973f163e4 <unknown>\n#11 0x558973f1a3d7 <unknown>\n#12 0x558973f24b20 <unknown>\n#13 0x558973f1b023 <unknown>\n#14 0x558973ee91aa <unknown>\n#15 0x558973f3f6b8 <unknown>\n#16 0x558973f3f847 <unknown>\n#17 0x558973f4f243 <unknown>\n#18 0x7f9758a38b43 <unknown>","statusTrace":"self = <test_widgets_constructor_page_ow6.TestWidgetsConstractorPage object at 0x7f3d63fc15d0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"df335d3b5a56cac0a0f7aee40f21aa55\")>\n\n    def test_TC_001_09_05_switched_on_Celsius(self, driver):\n        widget_page = WidgetsConstructorPage(driver)\n>       widget_page.check_switched_temperature_units('celsius')\n\ntests/test_widgets_constructor_page_ow6.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/widgets_constructor_page.py:29: in check_switched_temperature_units\n    self.element_is_visible(widget_locator)\npages/base_page.py:74: in element_is_visible\n    self.go_to_element(self.element_is_present(locator))\npages/base_page.py:131: in go_to_element\n    self.driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:500: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3d62b79150>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#16 0x558973f3f847 \\\\u003Cunknown>\\\\n#17 0x558973f4f243 \\\\u003Cunknown>\\\\n#18 0x7f9758a38b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: headless chrome=114.0.5735.133)\nE       Stacktrace:\nE       #0 0x558973f564e3 <unknown>\nE       #1 0x558973c85c76 <unknown>\nE       #2 0x558973c8a53c <unknown>\nE       #3 0x558973c8c480 <unknown>\nE       #4 0x558973cf9f32 <unknown>\nE       #5 0x558973ce1012 <unknown>\nE       #6 0x558973cf930e <unknown>\nE       #7 0x558973ce0de3 <unknown>\nE       #8 0x558973cb62dd <unknown>\nE       #9 0x558973cb734e <unknown>\nE       #10 0x558973f163e4 <unknown>\nE       #11 0x558973f1a3d7 <unknown>\nE       #12 0x558973f24b20 <unknown>\nE       #13 0x558973f1b023 <unknown>\nE       #14 0x558973ee91aa <unknown>\nE       #15 0x558973f3f6b8 <unknown>\nE       #16 0x558973f3f847 <unknown>\nE       #17 0x558973f4f243 <unknown>\nE       #18 0x7f9758a38b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1688608597215,"stop":1688608597991,"duration":776},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: headless chrome=114.0.5735.133)\nStacktrace:\n#0 0x558973f564e3 <unknown>\n#1 0x558973c85c76 <unknown>\n#2 0x558973c8a53c <unknown>\n#3 0x558973c8c480 <unknown>\n#4 0x558973cf9f32 <unknown>\n#5 0x558973ce1012 <unknown>\n#6 0x558973cf930e <unknown>\n#7 0x558973ce0de3 <unknown>\n#8 0x558973cb62dd <unknown>\n#9 0x558973cb734e <unknown>\n#10 0x558973f163e4 <unknown>\n#11 0x558973f1a3d7 <unknown>\n#12 0x558973f24b20 <unknown>\n#13 0x558973f1b023 <unknown>\n#14 0x558973ee91aa <unknown>\n#15 0x558973f3f6b8 <unknown>\n#16 0x558973f3f847 <unknown>\n#17 0x558973f4f243 <unknown>\n#18 0x7f9758a38b43 <unknown>","statusTrace":"self = <test_widgets_constructor_page_ow6.TestWidgetsConstractorPage object at 0x7f3d63fc15d0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"df335d3b5a56cac0a0f7aee40f21aa55\")>\n\n    def test_TC_001_09_05_switched_on_Celsius(self, driver):\n        widget_page = WidgetsConstructorPage(driver)\n>       widget_page.check_switched_temperature_units('celsius')\n\ntests/test_widgets_constructor_page_ow6.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/widgets_constructor_page.py:29: in check_switched_temperature_units\n    self.element_is_visible(widget_locator)\npages/base_page.py:74: in element_is_visible\n    self.go_to_element(self.element_is_present(locator))\npages/base_page.py:131: in go_to_element\n    self.driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:500: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3d62b79150>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#16 0x558973f3f847 \\\\u003Cunknown>\\\\n#17 0x558973f4f243 \\\\u003Cunknown>\\\\n#18 0x7f9758a38b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: headless chrome=114.0.5735.133)\nE       Stacktrace:\nE       #0 0x558973f564e3 <unknown>\nE       #1 0x558973c85c76 <unknown>\nE       #2 0x558973c8a53c <unknown>\nE       #3 0x558973c8c480 <unknown>\nE       #4 0x558973cf9f32 <unknown>\nE       #5 0x558973ce1012 <unknown>\nE       #6 0x558973cf930e <unknown>\nE       #7 0x558973ce0de3 <unknown>\nE       #8 0x558973cb62dd <unknown>\nE       #9 0x558973cb734e <unknown>\nE       #10 0x558973f163e4 <unknown>\nE       #11 0x558973f1a3d7 <unknown>\nE       #12 0x558973f24b20 <unknown>\nE       #13 0x558973f1b023 <unknown>\nE       #14 0x558973ee91aa <unknown>\nE       #15 0x558973f3f6b8 <unknown>\nE       #16 0x558973f3f847 <unknown>\nE       #17 0x558973f4f243 <unknown>\nE       #18 0x7f9758a38b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: StaleElementReferenceException","steps":[],"attachments":[{"uid":"d09311681574545f","name":"Screenshot","source":"d09311681574545f.png","type":"image/png","size":150193},{"uid":"3c30d5d822e6e134","name":"HTML source","source":"3c30d5d822e6e134.html","type":"text/html","size":75386},{"uid":"2a971aaa7c1c740a","name":"stdout","source":"2a971aaa7c1c740a.txt","type":"text/plain","size":35}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1688608601749,"stop":1688608601806,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_widgets_constructor_page_ow6"},{"name":"subSuite","value":"TestWidgetsConstractorPage"},{"name":"host","value":"fv-az174-151"},{"name":"thread","value":"2343-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_widgets_constructor_page_ow6"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":8,"unknown":0,"total":9},"items":[{"uid":"daccbf4beef1a7ee","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/38//#testresult/daccbf4beef1a7ee","status":"passed","time":{"start":1688522352499,"stop":1688522357454,"duration":4955}},{"uid":"b5b95ab0414ae399","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/37//#testresult/b5b95ab0414ae399","status":"passed","time":{"start":1688435959389,"stop":1688435965754,"duration":6365}},{"uid":"b4dfd920c19cafa2","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/36//#testresult/b4dfd920c19cafa2","status":"passed","time":{"start":1688348980444,"stop":1688348984922,"duration":4478}},{"uid":"521138b521bab5c8","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/35//#testresult/521138b521bab5c8","status":"passed","time":{"start":1688263159961,"stop":1688263165040,"duration":5079}},{"uid":"50d5294faebb7f8","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/34//#testresult/50d5294faebb7f8","status":"passed","time":{"start":1688176296118,"stop":1688176301380,"duration":5262}},{"uid":"5b3d5052cd1fd364","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/33//#testresult/5b3d5052cd1fd364","status":"passed","time":{"start":1688089012368,"stop":1688089018406,"duration":6038}},{"uid":"29ceefc9fae49a33","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/32//#testresult/29ceefc9fae49a33","status":"passed","time":{"start":1688002230449,"stop":1688002235677,"duration":5228}},{"uid":"2919bdcd051c851c","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/31//#testresult/2919bdcd051c851c","status":"passed","time":{"start":1687915828466,"stop":1687915833872,"duration":5406}}]},"tags":[]},"source":"ec9deb014d18719e.json","parameterValues":[]}