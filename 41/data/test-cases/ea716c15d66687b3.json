{"uid":"ea716c15d66687b3","name":"test_tc_001_04_06_verify_in_day_list_days_of_the_week","fullName":"tests.test_main_page_ow6.TestMainPage#test_tc_001_04_06_verify_in_day_list_days_of_the_week","historyId":"f26cf6cf0693d771e799b3854022c70c","time":{"start":1688781009071,"stop":1688781009086,"duration":15},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_main_page_ow6.TestMainPage object at 0x7fb9ed559990>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"66650badbf26ac19e85ce9e634bd94e7\")>\nopen_and_load_main_page = None\n\n    def test_tc_001_04_06_verify_in_day_list_days_of_the_week(self, driver, open_and_load_main_page):\n        page = MainPage(driver)\n>       page.verify_in_day_list_days_of_the_week()\n\ntests/test_main_page_ow6.py:256: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.main_page.MainPage object at 0x7fb9ec1eba60>\n\n    def verify_in_day_list_days_of_the_week(self):\n        days_by_page = []\n        days = self.driver.find_elements(*self.locators.DAYS_IN_8_DAY_FORECAST)\n        for day in days:\n            days_by_page.append(day.text[:3])\n        number_day = datetime.now().weekday()\n        days_by_computer = WEEKDAYS[number_day:] + WEEKDAYS[:number_day] + WEEKDAYS[(number_day):(number_day + 1):]\n>       assert days_by_page == days_by_computer\nE       AssertionError\n\npages/main_page.py:573: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1688781000458,"stop":1688781001281,"duration":823},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"open_and_load_main_page","time":{"start":1688781001281,"stop":1688781009070,"duration":7789},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"wait","time":{"start":1688781001281,"stop":1688781001281,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_main_page_ow6.TestMainPage object at 0x7fb9ed559990>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"66650badbf26ac19e85ce9e634bd94e7\")>\nopen_and_load_main_page = None\n\n    def test_tc_001_04_06_verify_in_day_list_days_of_the_week(self, driver, open_and_load_main_page):\n        page = MainPage(driver)\n>       page.verify_in_day_list_days_of_the_week()\n\ntests/test_main_page_ow6.py:256: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.main_page.MainPage object at 0x7fb9ec1eba60>\n\n    def verify_in_day_list_days_of_the_week(self):\n        days_by_page = []\n        days = self.driver.find_elements(*self.locators.DAYS_IN_8_DAY_FORECAST)\n        for day in days:\n            days_by_page.append(day.text[:3])\n        number_day = datetime.now().weekday()\n        days_by_computer = WEEKDAYS[number_day:] + WEEKDAYS[:number_day] + WEEKDAYS[(number_day):(number_day + 1):]\n>       assert days_by_page == days_by_computer\nE       AssertionError\n\npages/main_page.py:573: AssertionError","steps":[],"attachments":[{"uid":"d65bf3ff4b9e5599","name":"Screenshot","source":"d65bf3ff4b9e5599.png","type":"image/png","size":408756},{"uid":"9aabfeb9a7e52009","name":"HTML source","source":"9aabfeb9a7e52009.html","type":"text/html","size":178758},{"uid":"b328698baa27706e","name":"stdout","source":"b328698baa27706e.txt","type":"text/plain","size":35}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1688781009481,"stop":1688781009541,"duration":60},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"wait::0","time":{"start":1688781009481,"stop":1688781009481,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_main_page_ow6"},{"name":"subSuite","value":"TestMainPage"},{"name":"host","value":"fv-az502-368"},{"name":"thread","value":"2367-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_main_page_ow6"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":10,"unknown":0,"total":11},"items":[{"uid":"f554ae0dca87164a","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/40//#testresult/f554ae0dca87164a","status":"passed","time":{"start":1688694163002,"stop":1688694163109,"duration":107}},{"uid":"a3e99f3fb1a3e294","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/39//#testresult/a3e99f3fb1a3e294","status":"passed","time":{"start":1688607584110,"stop":1688607584211,"duration":101}},{"uid":"6b4e4da232b65b95","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/38//#testresult/6b4e4da232b65b95","status":"passed","time":{"start":1688521172763,"stop":1688521172862,"duration":99}},{"uid":"e3206ed6b5ab0e41","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/37//#testresult/e3206ed6b5ab0e41","status":"passed","time":{"start":1688434701889,"stop":1688434702012,"duration":123}},{"uid":"ca5a92e9fed9b578","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/36//#testresult/ca5a92e9fed9b578","status":"passed","time":{"start":1688347939627,"stop":1688347939725,"duration":98}},{"uid":"3eea16c8e53e8414","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/35//#testresult/3eea16c8e53e8414","status":"passed","time":{"start":1688261561747,"stop":1688261561841,"duration":94}},{"uid":"6184e9900832b75e","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/34//#testresult/6184e9900832b75e","status":"passed","time":{"start":1688175091821,"stop":1688175091944,"duration":123}},{"uid":"ae1fe034a0590117","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/33//#testresult/ae1fe034a0590117","status":"passed","time":{"start":1688087810806,"stop":1688087810910,"duration":104}},{"uid":"1d2fe025beb645fd","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/32//#testresult/1d2fe025beb645fd","status":"passed","time":{"start":1688001036704,"stop":1688001036833,"duration":129}},{"uid":"6712cddf273ef781","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/31//#testresult/6712cddf273ef781","status":"passed","time":{"start":1687914766040,"stop":1687914766140,"duration":100}}]},"tags":[]},"source":"ea716c15d66687b3.json","parameterValues":[]}