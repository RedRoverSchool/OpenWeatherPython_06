{"uid":"8af24d897926c8a3","name":"test_tc_017_04_02_api_key_name_has_limit_20_characters","fullName":"tests.test_api_keys_page_ow6.TestApiKey#test_tc_017_04_02_api_key_name_has_limit_20_characters","historyId":"b2d42d645a08afa3b67f13ddd80067a4","time":{"start":1688951135201,"stop":1688951135511,"duration":310},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#user_email\"}\n  (Session info: headless chrome=114.0.5735.198)\nStacktrace:\n#0 0x5601d30454e3 <unknown>\n#1 0x5601d2d74c76 <unknown>\n#2 0x5601d2db0c96 <unknown>\n#3 0x5601d2db0dc1 <unknown>\n#4 0x5601d2dea7f4 <unknown>\n#5 0x5601d2dd003d <unknown>\n#6 0x5601d2de830e <unknown>\n#7 0x5601d2dcfde3 <unknown>\n#8 0x5601d2da52dd <unknown>\n#9 0x5601d2da634e <unknown>\n#10 0x5601d30053e4 <unknown>\n#11 0x5601d30093d7 <unknown>\n#12 0x5601d3013b20 <unknown>\n#13 0x5601d300a023 <unknown>\n#14 0x5601d2fd81aa <unknown>\n#15 0x5601d302e6b8 <unknown>\n#16 0x5601d302e847 <unknown>\n#17 0x5601d303e243 <unknown>\n#18 0x7f544ce19b43 <unknown>","statusTrace":"self = <test_api_keys_page_ow6.TestApiKey object at 0x7f3fce4fb430>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e5cdfceb6eeb7e7b0c856d923e3e8e0c\")>\n\n    def test_tc_017_04_02_api_key_name_has_limit_20_characters(self, driver):\n        api_keys_page = ApiKeysPage(driver)\n>       api_keys_page.open_api_keys_page()\n\ntests/test_api_keys_page_ow6.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/api_keys_page.py:17: in open_api_keys_page\n    sign_in_page.log_in()\noldTests/test_group_ducktales/pages/sign_in_page.py:9: in log_in\n    self.driver.find_element(*SignInLocator.EMAIL_INPUT).send_keys(sign_in_page_data.USER_EMAIL)\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:831: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3fce1b9120>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#16 0x5601d302e847 \\\\u003Cunknown>\\\\n#17 0x5601d303e243 \\\\u003Cunknown>\\\\n#18 0x7f544ce19b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#user_email\"}\nE         (Session info: headless chrome=114.0.5735.198)\nE       Stacktrace:\nE       #0 0x5601d30454e3 <unknown>\nE       #1 0x5601d2d74c76 <unknown>\nE       #2 0x5601d2db0c96 <unknown>\nE       #3 0x5601d2db0dc1 <unknown>\nE       #4 0x5601d2dea7f4 <unknown>\nE       #5 0x5601d2dd003d <unknown>\nE       #6 0x5601d2de830e <unknown>\nE       #7 0x5601d2dcfde3 <unknown>\nE       #8 0x5601d2da52dd <unknown>\nE       #9 0x5601d2da634e <unknown>\nE       #10 0x5601d30053e4 <unknown>\nE       #11 0x5601d30093d7 <unknown>\nE       #12 0x5601d3013b20 <unknown>\nE       #13 0x5601d300a023 <unknown>\nE       #14 0x5601d2fd81aa <unknown>\nE       #15 0x5601d302e6b8 <unknown>\nE       #16 0x5601d302e847 <unknown>\nE       #17 0x5601d303e243 <unknown>\nE       #18 0x7f544ce19b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: NoSuchElementException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1688951134448,"stop":1688951135200,"duration":752},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#user_email\"}\n  (Session info: headless chrome=114.0.5735.198)\nStacktrace:\n#0 0x5601d30454e3 <unknown>\n#1 0x5601d2d74c76 <unknown>\n#2 0x5601d2db0c96 <unknown>\n#3 0x5601d2db0dc1 <unknown>\n#4 0x5601d2dea7f4 <unknown>\n#5 0x5601d2dd003d <unknown>\n#6 0x5601d2de830e <unknown>\n#7 0x5601d2dcfde3 <unknown>\n#8 0x5601d2da52dd <unknown>\n#9 0x5601d2da634e <unknown>\n#10 0x5601d30053e4 <unknown>\n#11 0x5601d30093d7 <unknown>\n#12 0x5601d3013b20 <unknown>\n#13 0x5601d300a023 <unknown>\n#14 0x5601d2fd81aa <unknown>\n#15 0x5601d302e6b8 <unknown>\n#16 0x5601d302e847 <unknown>\n#17 0x5601d303e243 <unknown>\n#18 0x7f544ce19b43 <unknown>","statusTrace":"self = <test_api_keys_page_ow6.TestApiKey object at 0x7f3fce4fb430>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e5cdfceb6eeb7e7b0c856d923e3e8e0c\")>\n\n    def test_tc_017_04_02_api_key_name_has_limit_20_characters(self, driver):\n        api_keys_page = ApiKeysPage(driver)\n>       api_keys_page.open_api_keys_page()\n\ntests/test_api_keys_page_ow6.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/api_keys_page.py:17: in open_api_keys_page\n    sign_in_page.log_in()\noldTests/test_group_ducktales/pages/sign_in_page.py:9: in log_in\n    self.driver.find_element(*SignInLocator.EMAIL_INPUT).send_keys(sign_in_page_data.USER_EMAIL)\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:831: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3fce1b9120>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#16 0x5601d302e847 \\\\u003Cunknown>\\\\n#17 0x5601d303e243 \\\\u003Cunknown>\\\\n#18 0x7f544ce19b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#user_email\"}\nE         (Session info: headless chrome=114.0.5735.198)\nE       Stacktrace:\nE       #0 0x5601d30454e3 <unknown>\nE       #1 0x5601d2d74c76 <unknown>\nE       #2 0x5601d2db0c96 <unknown>\nE       #3 0x5601d2db0dc1 <unknown>\nE       #4 0x5601d2dea7f4 <unknown>\nE       #5 0x5601d2dd003d <unknown>\nE       #6 0x5601d2de830e <unknown>\nE       #7 0x5601d2dcfde3 <unknown>\nE       #8 0x5601d2da52dd <unknown>\nE       #9 0x5601d2da634e <unknown>\nE       #10 0x5601d30053e4 <unknown>\nE       #11 0x5601d30093d7 <unknown>\nE       #12 0x5601d3013b20 <unknown>\nE       #13 0x5601d300a023 <unknown>\nE       #14 0x5601d2fd81aa <unknown>\nE       #15 0x5601d302e6b8 <unknown>\nE       #16 0x5601d302e847 <unknown>\nE       #17 0x5601d303e243 <unknown>\nE       #18 0x7f544ce19b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: NoSuchElementException","steps":[],"attachments":[{"uid":"45b7ba7330398215","name":"Screenshot","source":"45b7ba7330398215.png","type":"image/png","size":13816},{"uid":"dba152131f82c2be","name":"HTML source","source":"dba152131f82c2be.html","type":"text/html","size":155},{"uid":"e333a3271af35d2b","name":"stdout","source":"e333a3271af35d2b.txt","type":"text/plain","size":35}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1688951135619,"stop":1688951135673,"duration":54},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_api_keys_page_ow6"},{"name":"subSuite","value":"TestApiKey"},{"name":"host","value":"fv-az358-261"},{"name":"thread","value":"2372-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_api_keys_page_ow6"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":12,"unknown":0,"total":13},"items":[{"uid":"81853ee4120c938d","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/42//#testresult/81853ee4120c938d","status":"passed","time":{"start":1688864900839,"stop":1688864903248,"duration":2409}},{"uid":"7d0f14633fac1bd8","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/41//#testresult/7d0f14633fac1bd8","status":"passed","time":{"start":1688778299570,"stop":1688778303562,"duration":3992}},{"uid":"1d8861c4f1e49e5","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/40//#testresult/1d8861c4f1e49e5","status":"passed","time":{"start":1688691950961,"stop":1688691953340,"duration":2379}},{"uid":"6862396deea74184","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/39//#testresult/6862396deea74184","status":"passed","time":{"start":1688605517598,"stop":1688605519897,"duration":2299}},{"uid":"e1f81b074c84126c","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/38//#testresult/e1f81b074c84126c","status":"passed","time":{"start":1688519199005,"stop":1688519202005,"duration":3000}},{"uid":"2e642317cb2159d5","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/37//#testresult/2e642317cb2159d5","status":"passed","time":{"start":1688432714364,"stop":1688432718621,"duration":4257}},{"uid":"296a43f71c81c5a3","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/36//#testresult/296a43f71c81c5a3","status":"passed","time":{"start":1688346266172,"stop":1688346268674,"duration":2502}},{"uid":"836f14c097996c65","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/35//#testresult/836f14c097996c65","status":"passed","time":{"start":1688259968963,"stop":1688259972233,"duration":3270}},{"uid":"e62a107b30f2722a","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/34//#testresult/e62a107b30f2722a","status":"passed","time":{"start":1688173738856,"stop":1688173742190,"duration":3334}},{"uid":"990ae7abf6cc18a0","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/33//#testresult/990ae7abf6cc18a0","status":"passed","time":{"start":1688086840977,"stop":1688086844905,"duration":3928}},{"uid":"712708a5b982262","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/32//#testresult/712708a5b982262","status":"passed","time":{"start":1688000545265,"stop":1688000548567,"duration":3302}},{"uid":"5ce281ea381f282a","reportUrl":"https://RedRoverSchool.github.io/OpenWeatherPython_06/31//#testresult/5ce281ea381f282a","status":"passed","time":{"start":1687914322248,"stop":1687914324763,"duration":2515}}]},"tags":[]},"source":"8af24d897926c8a3.json","parameterValues":[]}